import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import AppLayout from '@/components/layout/AppLayout';
import { useI18n } from '@/hooks/use-i18n';
import { useToast } from '@/hooks/use-toast';
import { isUnauthorizedError } from '@/lib/authUtils';
import { apiRequest } from '@/lib/queryClient';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { TaskSearchInput } from '@/components/ui/TaskSearchInput';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { 
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog';
import { 
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Textarea } from '@/components/ui/textarea';
import { EvidenceCard } from '@/components/evidence/EvidenceCard';
import { EvidenceListRow } from '@/components/evidence/EvidenceListRow';
import { UserAvatar } from '@/components/ui/user-avatar';
import { 
  Upload, 
  FileText, 
  Download, 
  Calendar,
  User,
  File,
  Image,
  Video,
  Archive,
  Trash2,
  Eye,
  MessageCircle,
  Building,
  Grid3X3,
  List,
  Folder,
  CheckCircle,
  Clock,
  Tag,
  Filter,
  SortAsc,
  SortDesc,
  Shield,
} from 'lucide-react';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';

const evidenceSchema = z.object({
  title: z.string().min(1, 'Evidence title is required'),
  titleAr: z.string().optional(),
  description: z.string().optional(),
  descriptionAr: z.string().optional(),
  projectId: z.number().optional(),
  taskId: z.number().optional(),
  eccControlId: z.number().optional(),
  isNewVersion: z.boolean().optional(),
  parentEvidenceId: z.number().optional(),
  version: z.string().optional(),
});

type EvidenceFormData = z.infer<typeof evidenceSchema>;

export default function Evidence() {
  const { t, language } = useI18n();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [searchTerm, setSearchTerm] = useState('');
  const [typeFilter, setTypeFilter] = useState<string>('all');
  const [projectFilter, setProjectFilter] = useState<string>('all');
  const [sortBy, setSortBy] = useState<string>('newest');
  const [viewMode, setViewMode] = useState<'card' | 'list'>('card');
  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);
  const [isDetailDialogOpen, setIsDetailDialogOpen] = useState(false);
  const [isCommentDialogOpen, setIsCommentDialogOpen] = useState(false);
  const [selectedEvidence, setSelectedEvidence] = useState<any>(null);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [newComment, setNewComment] = useState('');
  const [isAddingComment, setIsAddingComment] = useState(false);
  const [newVersionFile, setNewVersionFile] = useState<File | null>(null);
  // Version number is now automatically generated by backend
  const [versionNotes, setVersionNotes] = useState('');
  const [comment, setComment] = useState('');

  const { data: evidence, isLoading, error } = useQuery({
    queryKey: ['/api/evidence'],
    retry: false,
  });

  const { data: projects } = useQuery({
    queryKey: ['/api/projects'],
    retry: false,
  });

  const { data: tasks } = useQuery({
    queryKey: ['/api/tasks'],
    retry: false,
  });

  const { data: eccControls } = useQuery({
    queryKey: ['/api/ecc-controls'],
    retry: false,
  });

  // Evidence comments query
  const { data: evidenceComments, refetch: refetchComments } = useQuery({
    queryKey: ['/api/evidence/comments', selectedEvidence?.id],
    enabled: !!selectedEvidence?.id,
    retry: false,
  });

  // Evidence versions query  
  const { data: evidenceVersions, isLoading: versionsLoading } = useQuery({
    queryKey: ['/api/evidence', selectedEvidence?.id, 'versions'],
    queryFn: () => fetch(`/api/evidence/${selectedEvidence?.id}/versions`, { credentials: 'include' }).then(res => res.json()),
    enabled: !!selectedEvidence?.id,
    retry: false,
  });

  // Helper functions
  const getProjectName = (projectId: number) => {
    const project = Array.isArray(projects) ? projects.find((p: any) => p.id === projectId) : null;
    return project ? (language === 'ar' && project.nameAr ? project.nameAr : project.name) : 'Unknown Project';
  };

  const getTaskName = (taskId: number) => {
    const task = Array.isArray(tasks) ? tasks.find((t: any) => t.id === taskId) : null;
    return task ? (language === 'ar' && task.titleAr ? task.titleAr : task.title) : 'Unknown Task';
  };

  const getRegulationType = (item: any) => {
    if (item.eccControlId) {
      const control = Array.isArray(eccControls) ? eccControls.find((c: any) => c.id === item.eccControlId) : null;
      return control ? 'ECC' : 'Unknown';
    }
    if (item.projectId) {
      const project = Array.isArray(projects) ? projects.find((p: any) => p.id === item.projectId) : null;
      return project?.regulationType?.toUpperCase() || 'ECC';
    }
    return 'General';
  };

  const getFileIcon = (fileType: string) => {
    if (fileType?.includes('image')) return <Image className="h-6 w-6 text-teal-600" />;
    if (fileType?.includes('video')) return <Video className="h-6 w-6 text-teal-600" />;
    if (fileType?.includes('pdf')) return <FileText className="h-6 w-6 text-teal-600" />;
    if (fileType?.includes('zip') || fileType?.includes('rar')) return <Archive className="h-6 w-6 text-teal-600" />;
    return <File className="h-6 w-6 text-teal-600" />;
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString(language === 'ar' ? 'ar-SA' : 'en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };



  const handleViewDetails = (item: any) => {
    setSelectedEvidence(item);
    setIsDetailDialogOpen(true);
  };

  const handleAddComment = (item: any) => {
    setSelectedEvidence(item);
    setIsCommentDialogOpen(true);
  };

  const addCommentToEvidence = async () => {
    if (!newComment.trim() || !selectedEvidence) return;
    
    setIsAddingComment(true);
    try {
      await apiRequest(`/api/evidence/${selectedEvidence.id}/comments`, 'POST', {
        comment: newComment.trim()
      });
      
      toast({
        title: language === 'ar' ? 'تم إضافة التعليق' : 'Comment Added',
        description: language === 'ar' ? 'تم إضافة التعليق بنجاح' : 'Comment added successfully',
      });
      setNewComment('');
      
      // Refresh comments
      refetchComments();
    } catch (error) {
      toast({
        title: language === 'ar' ? 'خطأ' : 'Error',
        description: language === 'ar' ? 'فشل في إضافة التعليق' : 'Failed to add comment',
        variant: 'destructive',
      });
    } finally {
      setIsAddingComment(false);
    }
  };

  const handleNewVersionUpload = async () => {
    if (!newVersionFile || !selectedEvidence) {
      toast({
        title: language === 'ar' ? 'خطأ' : 'Error',
        description: language === 'ar' ? 'يرجى اختيار ملف' : 'Please select a file',
        variant: 'destructive',
      });
      return;
    }

    try {
      const formData = new FormData();
      formData.append('files', newVersionFile);
      formData.append('projectId', selectedEvidence.projectId?.toString() || '');
      formData.append('taskId', selectedEvidence.taskId?.toString() || '');
      formData.append('controlId', selectedEvidence.eccControlId?.toString() || '');
      formData.append('isNewVersion', 'true');
      formData.append('parentEvidenceId', selectedEvidence.id.toString());
      // Version will be generated automatically by backend
      if (versionNotes) {
        formData.append('comment', versionNotes);
      }

      const response = await fetch('/api/evidence/upload', {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error(`Upload failed: ${response.statusText}`);
      }

      const result = await response.json();

      toast({
        title: language === 'ar' ? 'تم رفع الإصدار الجديد' : 'New Version Uploaded',
        description: language === 'ar' ? 'تم رفع الإصدار الجديد بنجاح' : 'New version uploaded successfully',
      });
      
      setNewVersionFile(null);
      setVersionNotes('');
      
      // Refresh evidence data and comments
      queryClient.invalidateQueries({ queryKey: ['/api/evidence'] });
      queryClient.invalidateQueries({ queryKey: ['/api/evidence/versions', selectedEvidence.id] });
      queryClient.invalidateQueries({ queryKey: ['/api/evidence/comments', selectedEvidence.id] });
    } catch (error) {
      toast({
        title: language === 'ar' ? 'خطأ في الرفع' : 'Upload Error',
        description: language === 'ar' ? 'فشل في رفع الملف' : 'Failed to upload file',
        variant: 'destructive',
      });
    }
  };

  const handleNewVersionFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setNewVersionFile(file);
    }
  };

  const handleDownload = (item: any) => {
    // Create download link
    const link = document.createElement('a');
    link.href = `/api/evidence/${item.id}/download`;
    link.download = item.fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  const getControlInfo = (controlId: number) => {
    const control = Array.isArray(eccControls) ? eccControls.find((c: any) => c.id === controlId) : null;
    if (!control) return null;
    return {
      code: control.code,
      codeAr: control.codeAr,
      controlEn: control.controlEn,
      controlAr: control.controlAr,
      domainEn: control.domainEn,
      domainAr: control.domainAr,
      subdomainEn: control.subdomainEn,
      subdomainAr: control.subdomainAr,
    };
  };

  const uploadEvidenceMutation = useMutation({
    mutationFn: async (data: EvidenceFormData & { file: File }) => {
      const formData = new FormData();
      formData.append('file', data.file);
      formData.append('title', data.title);
      if (data.titleAr) formData.append('titleAr', data.titleAr);
      if (data.description) formData.append('description', data.description);
      if (data.descriptionAr) formData.append('descriptionAr', data.descriptionAr);
      if (data.projectId) formData.append('projectId', data.projectId.toString());
      if (data.taskId) formData.append('taskId', data.taskId.toString());
      if (data.eccControlId) formData.append('eccControlId', data.eccControlId.toString());
      if (data.isNewVersion) formData.append('isNewVersion', 'true');
      if (data.parentEvidenceId) formData.append('parentEvidenceId', data.parentEvidenceId.toString());
      if (data.version) formData.append('version', data.version);

      const response = await fetch('/api/evidence', {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });

      if (!response.ok) {
        throw new Error(`${response.status}: ${response.statusText}`);
      }

      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/evidence'] });
      setIsUploadDialogOpen(false);
      setSelectedFile(null);
      form.reset();
      toast({
        title: t('common.success'),
        description: 'Evidence uploaded successfully',
      });
    },
    onError: (error) => {
      if (isUnauthorizedError(error as Error)) {
        toast({
          title: "Unauthorized",
          description: "You are logged out. Logging in again...",
          variant: "destructive",
        });
        setTimeout(() => {
          window.location.href = "/api/login";
        }, 500);
        return;
      }
      toast({
        title: t('common.error'),
        description: 'Failed to upload evidence',
        variant: 'destructive',
      });
    },
  });

  const form = useForm<EvidenceFormData>({
    resolver: zodResolver(evidenceSchema),
    defaultValues: {
      title: '',
      titleAr: '',
      description: '',
      descriptionAr: '',
    },
  });

  const onSubmit = (data: EvidenceFormData) => {
    if (!selectedFile) {
      toast({
        title: t('common.error'),
        description: 'Please select a file to upload',
        variant: 'destructive',
      });
      return;
    }
    uploadEvidenceMutation.mutate({ ...data, file: selectedFile });
  };



  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      setSelectedFile(file);
    }
  };

  const filteredAndSortedEvidence = (() => {
    let filtered = Array.isArray(evidence) ? evidence.filter((item: any) => {
      const matchesSearch = item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           item.description?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           item.fileName.toLowerCase().includes(searchTerm.toLowerCase());
      
      const matchesType = typeFilter === 'all' || 
                         (typeFilter === 'documents' && item.fileType?.includes('pdf')) ||
                         (typeFilter === 'images' && item.fileType?.startsWith('image/')) ||
                         (typeFilter === 'videos' && item.fileType?.startsWith('video/')) ||
                         (typeFilter === 'archives' && (item.fileType?.includes('zip') || item.fileType?.includes('archive')));
      
      const matchesProject = projectFilter === 'all' || 
                             (projectFilter === 'unlinked' && !item.projectId) ||
                             item.projectId?.toString() === projectFilter;
      
      return matchesSearch && matchesType && matchesProject;
    }) : [];

    // Sort the filtered results
    filtered.sort((a: any, b: any) => {
      switch (sortBy) {
        case 'newest':
          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();
        case 'oldest':
          return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();
        case 'name-asc':
          return a.title.localeCompare(b.title);
        case 'name-desc':
          return b.title.localeCompare(a.title);
        case 'size-asc':
          return a.fileSize - b.fileSize;
        case 'size-desc':
          return b.fileSize - a.fileSize;
        default:
          return 0;
      }
    });

    return filtered;
  })();

  if (error && isUnauthorizedError(error as Error)) {
    return null; // Will redirect to login
  }

  return (
    <AppLayout>
      <div className="space-y-6">
        {/* Header with Hero Background */}
        <div className="relative bg-gradient-to-r from-teal-600 to-teal-700 rounded-xl p-8 text-white">
          <div className="absolute inset-0 bg-black/10 rounded-xl"></div>
          <div className="relative">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
              <div>
                <h1 className="text-3xl font-bold">
                  {language === 'ar' ? 'مستودع الأدلة' : 'Evidence Repository'}
                </h1>
                <p className="mt-2 text-teal-100">
                  {language === 'ar'
                    ? 'إدارة ومشاركة أدلة وملفات الامتثال بطريقة منظمة ومرئية'
                    : 'Manage and share compliance evidence and files in an organized, visual way'
                  }
                </p>
                <div className="mt-4 flex flex-wrap gap-4 text-sm">
                  <div className="flex items-center gap-2">
                    <Badge variant="secondary" className="bg-white/20 text-white border-white/30">
                      {filteredAndSortedEvidence.length} {language === 'ar' ? 'ملف' : 'Files'}
                    </Badge>
                  </div>
                </div>
              </div>

              <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>
                <DialogTrigger asChild>
                  <Button className="bg-white text-teal-700 hover:bg-gray-50">
                    <Upload className="h-4 w-4 mr-2" />
                    {language === 'ar' ? 'رفع ملف جديد' : 'Upload Evidence'}
                  </Button>
                </DialogTrigger>
                <DialogContent className="max-w-2xl">
                  <DialogHeader>
                    <DialogTitle>{language === 'ar' ? 'رفع ملف جديد' : 'Upload Evidence'}</DialogTitle>
                  </DialogHeader>
                  <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                      {/* File Upload */}
                      <div className="space-y-2">
                        <label className="text-sm font-medium">File</label>
                        <div className="border-2 border-dashed border-slate-300 rounded-lg p-6 text-center">
                          <input
                            type="file"
                            onChange={handleFileChange}
                            className="hidden"
                            id="file-upload"
                            accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.jpg,.jpeg,.png,.gif,.mp4,.mov,.zip,.rar"
                          />
                          <label htmlFor="file-upload" className="cursor-pointer">
                            <Upload className="h-12 w-12 text-slate-400 mx-auto mb-4" />
                            <p className="text-sm text-slate-600 mb-2">
                              Click to upload or drag and drop
                            </p>
                            <p className="text-xs text-slate-500">
                              PDF, DOC, XLS, PPT, Images, Videos, Archives up to 10MB
                            </p>
                          </label>
                          {selectedFile && (
                            <div className="mt-4 p-3 bg-slate-50 rounded-lg">
                              <div className="flex items-center justify-center space-x-2">
                                {getFileIcon(selectedFile.type)}
                                <span className="text-sm font-medium">{selectedFile.name}</span>
                                <Badge variant="outline">
                                  {formatFileSize(selectedFile.size)}
                                </Badge>
                              </div>
                            </div>
                          )}
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <FormField
                          control={form.control}
                          name="title"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Evidence Title (English)</FormLabel>
                              <FormControl>
                                <Input {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                        <FormField
                          control={form.control}
                          name="titleAr"
                          render={({ field }) => (
                            <FormItem>
                              <FormLabel>Evidence Title (Arabic)</FormLabel>
                              <FormControl>
                                <Input {...field} />
                              </FormControl>
                              <FormMessage />
                            </FormItem>
                          )}
                        />
                      </div>
                      
                      <div className="flex gap-2">
                        <Button
                          type="button"
                          variant="outline"
                          onClick={() => setIsUploadDialogOpen(false)}
                          className="flex-1"
                        >
                          Cancel
                        </Button>
                        <Button
                          type="submit"
                          disabled={uploadEvidenceMutation.isPending || !selectedFile}
                          className="flex-1"
                        >
                          {uploadEvidenceMutation.isPending ? 'Uploading...' : 'Upload'}
                        </Button>
                      </div>
                    </form>
                  </Form>
                </DialogContent>
              </Dialog>
            </div>
          </div>
        </div>

        {/* Filters and Controls */}
        <div className="bg-white dark:bg-gray-800 rounded-lg border border-gray-200 dark:border-gray-700 p-6">
          <div className="flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between">
            {/* Search and Filters */}
            <div className="flex flex-col sm:flex-row gap-4 flex-1">
              {/* Search */}
              <div className="flex-1 max-w-md">
                <TaskSearchInput
                  value={searchTerm}
                  onChange={setSearchTerm}
                  placeholder={language === 'ar' ? 'البحث في الأدلة...' : 'Search evidence...'}
                />
              </div>

              {/* Type Filter */}
              <Select value={typeFilter} onValueChange={setTypeFilter}>
                <SelectTrigger className="w-48">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">{language === 'ar' ? 'جميع الأنواع' : 'All Types'}</SelectItem>
                  <SelectItem value="documents">{language === 'ar' ? 'المستندات' : 'Documents'}</SelectItem>
                  <SelectItem value="images">{language === 'ar' ? 'الصور' : 'Images'}</SelectItem>
                  <SelectItem value="videos">{language === 'ar' ? 'الفيديوهات' : 'Videos'}</SelectItem>
                  <SelectItem value="archives">{language === 'ar' ? 'الأرشيفات' : 'Archives'}</SelectItem>
                </SelectContent>
              </Select>

              {/* Project Filter */}
              <Select value={projectFilter} onValueChange={setProjectFilter}>
                <SelectTrigger className="w-48">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">{language === 'ar' ? 'جميع المشاريع' : 'All Projects'}</SelectItem>
                  <SelectItem value="unlinked">{language === 'ar' ? 'غير مرتبط' : 'Unlinked'}</SelectItem>
                  {Array.isArray(projects) ? projects.map((project: any) => (
                    <SelectItem key={project.id} value={project.id.toString()}>
                      {language === 'ar' && project.nameAr ? project.nameAr : project.name}
                    </SelectItem>
                  )) : null}
                </SelectContent>
              </Select>
            </div>

            {/* View Controls */}
            <div className="flex items-center gap-4">
              {/* Sort */}
              <Select value={sortBy} onValueChange={setSortBy}>
                <SelectTrigger className="w-40">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="newest">{language === 'ar' ? 'الأحدث' : 'Newest'}</SelectItem>
                  <SelectItem value="oldest">{language === 'ar' ? 'الأقدم' : 'Oldest'}</SelectItem>
                  <SelectItem value="name-asc">{language === 'ar' ? 'الاسم (أ-ي)' : 'Name (A-Z)'}</SelectItem>
                  <SelectItem value="name-desc">{language === 'ar' ? 'الاسم (ي-أ)' : 'Name (Z-A)'}</SelectItem>
                  <SelectItem value="size-asc">{language === 'ar' ? 'الحجم (صغير)' : 'Size (Small)'}</SelectItem>
                  <SelectItem value="size-desc">{language === 'ar' ? 'الحجم (كبير)' : 'Size (Large)'}</SelectItem>
                </SelectContent>
              </Select>

              {/* View Toggle */}
              <div className="flex items-center bg-gray-100 dark:bg-gray-700 rounded-lg p-1">
                <Button
                  variant={viewMode === 'card' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setViewMode('card')}
                  className="px-3"
                >
                  <Grid3X3 className="h-4 w-4" />
                </Button>
                <Button
                  variant={viewMode === 'list' ? 'default' : 'ghost'}
                  size="sm"
                  onClick={() => setViewMode('list')}
                  className="px-3"
                >
                  <List className="h-4 w-4" />
                </Button>
              </div>
            </div>
          </div>
        </div>

        {/* Evidence Display */}
        <div className="min-h-[400px]">
          {isLoading ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {[...Array(6)].map((_, i) => (
                <Card key={i} className="p-6">
                  <Skeleton className="h-4 w-3/4 mb-4" />
                  <Skeleton className="h-4 w-1/2 mb-2" />
                  <Skeleton className="h-4 w-full mb-4" />
                  <Skeleton className="h-8 w-full" />
                </Card>
              ))}
            </div>
          ) : filteredAndSortedEvidence.length === 0 ? (
            <div className="text-center py-12">
              <Folder className="h-12 w-12 text-gray-300 mx-auto mb-4" />
              <h3 className="text-lg font-semibold text-gray-600 mb-2">
                {language === 'ar' ? 'لا توجد أدلة' : 'No Evidence Found'}
              </h3>
              <p className="text-gray-500 mb-6">
                {language === 'ar' 
                  ? 'لم يتم العثور على أدلة تطابق معايير البحث الخاصة بك'
                  : 'No evidence found matching your search criteria'
                }
              </p>
              <Button onClick={() => setIsUploadDialogOpen(true)}>
                <Upload className="h-4 w-4 mr-2" />
                {language === 'ar' ? 'رفع أول ملف' : 'Upload First Evidence'}
              </Button>
            </div>
          ) : (
            <div>
              {viewMode === 'card' ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredAndSortedEvidence.map((item: any) => (
                    <EvidenceCard
                      key={item.id}
                      evidence={item}
                      onViewDetails={handleViewDetails}
                      onAddComment={handleAddComment}
                      onDownload={handleDownload}
                      getProjectName={getProjectName}
                      getTaskName={getTaskName}
                      getRegulationType={getRegulationType}
                      getControlInfo={getControlInfo}
                      language={language}
                    />
                  ))}
                </div>
              ) : (
                <div className="space-y-3">
                  {/* List Header - Hidden on mobile */}
                  <div className="hidden md:flex items-center p-3 bg-gray-50 dark:bg-gray-800 rounded-lg text-sm font-medium text-gray-600 dark:text-gray-400">
                    <div className="flex-1">File</div>
                    <div className="w-48 px-4">Project/Task</div>
                    <div className="w-32 px-4 text-center">Details</div>
                    <div className="w-32 px-4 text-right">Size & Date</div>
                    <div className="w-32 text-center">Actions</div>
                  </div>
                  
                  {filteredAndSortedEvidence.map((item: any) => (
                    <EvidenceListRow
                      key={item.id}
                      evidence={item}
                      onViewDetails={handleViewDetails}
                      onAddComment={handleAddComment}
                      onDownload={handleDownload}
                      getProjectName={getProjectName}
                      getTaskName={getTaskName}
                      getRegulationType={getRegulationType}
                      getControlInfo={getControlInfo}
                      language={language}
                    />
                  ))}
                </div>
              )}
            </div>
          )}
        </div>

        {/* Enhanced Detail Dialog */}
        <Dialog open={isDetailDialogOpen} onOpenChange={setIsDetailDialogOpen}>
          <DialogContent className="max-w-6xl w-[92vw] h-[88vh] p-0 flex flex-col" aria-describedby="evidence-dialog-description">
            <DialogHeader className="px-6 pt-6 pb-2 flex-shrink-0">
              <DialogTitle className="flex items-center gap-3 text-xl font-semibold">
                <div className="w-8 h-8 bg-gradient-to-br from-teal-50 to-teal-100 rounded-lg flex items-center justify-center">
                  {getFileIcon(selectedEvidence?.fileType)}
                </div>
                {language === 'ar' ? 'تفاصيل الدليل' : 'Evidence Details'}
              </DialogTitle>
              <div id="evidence-dialog-description" className="sr-only">
                Detailed view of evidence file with tabs for details, versions, comments, and uploads
              </div>
            </DialogHeader>
            {selectedEvidence && (
              <Tabs defaultValue="details" className="flex flex-col flex-1">
                <TabsList className="grid w-full grid-cols-5 h-12 bg-gray-100 dark:bg-gray-800 rounded-none border-t border-b border-gray-200 dark:border-gray-700 p-1 flex-shrink-0">
                  <TabsTrigger 
                    value="details" 
                    className="text-sm font-medium px-4 py-2 rounded-md transition-all duration-200 data-[state=active]:bg-white data-[state=active]:text-teal-700 data-[state=active]:shadow-sm dark:data-[state=active]:bg-gray-700 dark:data-[state=active]:text-teal-400"
                  >
                    {language === 'ar' ? 'التفاصيل' : 'Details'}
                  </TabsTrigger>
                  <TabsTrigger 
                    value="controls"
                    className="text-sm font-medium px-4 py-2 rounded-md transition-all duration-200 data-[state=active]:bg-white data-[state=active]:text-teal-700 data-[state=active]:shadow-sm dark:data-[state=active]:bg-gray-700 dark:data-[state=active]:text-teal-400"
                  >
                    {language === 'ar' ? 'الضوابط' : 'Controls'}
                  </TabsTrigger>
                  <TabsTrigger 
                    value="versions"
                    className="text-sm font-medium px-4 py-2 rounded-md transition-all duration-200 data-[state=active]:bg-white data-[state=active]:text-teal-700 data-[state=active]:shadow-sm dark:data-[state=active]:bg-gray-700 dark:data-[state=active]:text-teal-400"
                  >
                    {language === 'ar' ? 'الإصدارات' : 'Versions'}
                  </TabsTrigger>
                  <TabsTrigger 
                    value="comments"
                    className="text-sm font-medium px-4 py-2 rounded-md transition-all duration-200 data-[state=active]:bg-white data-[state=active]:text-teal-700 data-[state=active]:shadow-sm dark:data-[state=active]:bg-gray-700 dark:data-[state=active]:text-teal-400"
                  >
                    {language === 'ar' ? 'التعليقات' : 'Comments'}
                  </TabsTrigger>
                  <TabsTrigger 
                    value="upload"
                    className="text-sm font-medium px-4 py-2 rounded-md transition-all duration-200 data-[state=active]:bg-white data-[state=active]:text-teal-700 data-[state=active]:shadow-sm dark:data-[state=active]:bg-gray-700 dark:data-[state=active]:text-teal-400"
                  >
                    {language === 'ar' ? 'رفع إصدار جديد' : 'Upload Version'}
                  </TabsTrigger>
                </TabsList>

                {/* Details Tab */}
                <TabsContent value="details" className="flex-1 overflow-hidden">
                  <div className="h-full overflow-y-auto px-6 py-6">
                    <div className="flex items-start gap-6 mb-6">
                        <div className="w-16 h-16 bg-gradient-to-br from-teal-50 to-teal-100 rounded-xl flex items-center justify-center shadow-sm">
                          {getFileIcon(selectedEvidence.fileType)}
                        </div>
                        <div className="flex-1 min-w-0">
                          <h3 className="text-xl font-semibold mb-2 text-gray-900 dark:text-white">
                            {language === 'ar' && selectedEvidence.titleAr ? selectedEvidence.titleAr : selectedEvidence.title}
                          </h3>
                          <p className="text-gray-600 dark:text-gray-400 text-sm leading-relaxed">
                            {language === 'ar' && selectedEvidence.descriptionAr ? selectedEvidence.descriptionAr : selectedEvidence.description}
                          </p>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                        <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700">
                          <span className="font-medium text-gray-600 dark:text-gray-400 text-sm block mb-1">File Size</span>
                          <p className="text-lg font-semibold text-gray-900 dark:text-white">{formatFileSize(selectedEvidence.fileSize)}</p>
                        </div>
                        <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700">
                          <span className="font-medium text-gray-600 dark:text-gray-400 text-sm block mb-1">Version</span>
                          <p className="text-lg font-semibold text-gray-900 dark:text-white">v{selectedEvidence.version}</p>
                        </div>
                        <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700">
                          <span className="font-medium text-gray-600 dark:text-gray-400 text-sm block mb-1">Type</span>
                          <p className="text-lg font-semibold text-gray-900 dark:text-white">{getRegulationType(selectedEvidence)}</p>
                        </div>
                        {selectedEvidence.uploaderName && (
                          <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700">
                            <span className="font-medium text-gray-600 dark:text-gray-400 text-sm block mb-1">Uploaded by</span>
                            <p className="text-lg font-semibold text-gray-900 dark:text-white">{selectedEvidence.uploaderName}</p>
                          </div>
                        )}
                        <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700">
                          <span className="font-medium text-gray-600 dark:text-gray-400 text-sm block mb-1">Upload Date</span>
                          <p className="text-lg font-semibold text-gray-900 dark:text-white">{formatDate(selectedEvidence.createdAt)}</p>
                        </div>
                        {(selectedEvidence.projectId || selectedEvidence.taskId) && (
                          <div className="bg-gray-50 dark:bg-gray-800 p-4 rounded-lg border border-gray-200 dark:border-gray-700">
                            <span className="font-medium text-gray-600 dark:text-gray-400 text-sm block mb-2">Linked To</span>
                            <div className="flex flex-wrap gap-2">
                              {selectedEvidence.projectId && (
                                <Badge variant="outline" className="bg-blue-50 text-blue-700 border-blue-200 hover:bg-blue-100 transition-colors">
                                  <Building className="h-3 w-3 mr-1" />
                                  {getProjectName(selectedEvidence.projectId)}
                                </Badge>
                              )}
                              {selectedEvidence.taskId && (
                                <Badge variant="outline" className="bg-green-50 text-green-700 border-green-200 hover:bg-green-100 transition-colors">
                                  <CheckCircle className="h-3 w-3 mr-1" />
                                  {getTaskName(selectedEvidence.taskId)}
                                </Badge>
                              )}
                            </div>
                          </div>
                        )}
                      </div>

                    {/* Download Button - now part of scrollable content */}
                    <div className="mt-8 flex justify-center">
                      <Button 
                        onClick={() => handleDownload(selectedEvidence)} 
                        className="w-64 h-11 bg-teal-600 hover:bg-teal-700 text-white shadow-md hover:shadow-lg transition-all duration-200"
                      >
                        <Download className="h-4 w-4 mr-2" />
                        {language === 'ar' ? 'تحميل الملف' : 'Download File'}
                      </Button>
                    </div>
                  </div>
                </TabsContent>

                {/* Controls Tab */}
                <TabsContent value="controls" className="flex-1 overflow-hidden">
                  <div className="h-full overflow-y-auto px-6 py-6">
                    <div className="flex items-center justify-between mb-6">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                          {language === 'ar' ? 'الضوابط المرتبطة' : 'Linked Controls'}
                        </h3>
                        <Badge variant="outline" className="bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300">
                          {selectedEvidence.eccControlId ? '1' : '0'} {language === 'ar' ? 'ضابط' : 'Controls'}
                        </Badge>
                      </div>
                      
                      <div className="space-y-4">
                        {selectedEvidence.eccControlId ? (
                          (() => {
                            const controlInfo = getControlInfo(selectedEvidence.eccControlId);
                            return controlInfo ? (
                              <Card key={selectedEvidence.eccControlId} className="p-6 border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200">
                                <div className="flex items-start gap-4">
                                  <div className="w-12 h-12 bg-gradient-to-br from-teal-50 to-teal-100 rounded-xl flex items-center justify-center shadow-sm">
                                    <Shield className="h-6 w-6 text-teal-600" />
                                  </div>
                                  <div className="flex-1 min-w-0">
                                    <div className="flex items-center gap-3 mb-3">
                                      <Badge variant="outline" className="bg-teal-50 text-teal-700 border-teal-200 hover:bg-teal-100 transition-colors">
                                        {language === 'ar' && controlInfo.codeAr ? controlInfo.codeAr : controlInfo.code}
                                      </Badge>
                                      <span className="text-xs text-gray-500 font-medium">
                                        {language === 'ar' ? 'ضابط الأمن السيبراني الأساسي' : 'Essential Cybersecurity Control'}
                                      </span>
                                    </div>
                                    <h4 className="font-semibold text-gray-900 dark:text-white mb-2 leading-relaxed">
                                      {language === 'ar' && controlInfo.controlAr ? controlInfo.controlAr : controlInfo.controlEn}
                                    </h4>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                                      <div className="bg-gray-50 dark:bg-gray-800 p-3 rounded-lg">
                                        <span className="text-xs font-medium text-gray-600 dark:text-gray-400 block mb-1">Domain</span>
                                        <p className="text-sm text-gray-900 dark:text-white">
                                          {language === 'ar' && controlInfo.domainAr ? controlInfo.domainAr : controlInfo.domainEn}
                                        </p>
                                      </div>
                                      <div className="bg-gray-50 dark:bg-gray-800 p-3 rounded-lg">
                                        <span className="text-xs font-medium text-gray-600 dark:text-gray-400 block mb-1">Subdomain</span>
                                        <p className="text-sm text-gray-900 dark:text-white">
                                          {language === 'ar' && controlInfo.subdomainAr ? controlInfo.subdomainAr : controlInfo.subdomainEn}
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </Card>
                            ) : (
                              <div className="text-center py-12 text-gray-500">
                                <div className="w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
                                  <Shield className="h-8 w-8 text-gray-400" />
                                </div>
                                <p className="text-lg font-medium mb-2">{language === 'ar' ? 'معلومات الضابط غير متوفرة' : 'Control information not available'}</p>
                                <p className="text-sm text-gray-400">{language === 'ar' ? 'لا يمكن العثور على تفاصيل هذا الضابط' : 'Unable to find details for this control'}</p>
                              </div>
                            );
                          })()
                        ) : (
                          <div className="text-center py-12 text-gray-500">
                            <div className="w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
                              <Shield className="h-8 w-8 text-gray-400" />
                            </div>
                            <p className="text-lg font-medium mb-2">{language === 'ar' ? 'لا توجد ضوابط مرتبطة' : 'No linked controls'}</p>
                            <p className="text-sm text-gray-400">
                              {language === 'ar' ? 'لم يتم ربط هذا الدليل بأي ضوابط أمن سيبراني' : 'This evidence is not linked to any cybersecurity controls'}
                            </p>
                          </div>
                        )}
                      </div>
                  </div>
                </TabsContent>

                {/* Versions Tab */}
                <TabsContent value="versions" className="flex-1 overflow-hidden">
                  <div className="h-full overflow-y-auto px-6 py-6">
                      <div className="flex items-center justify-between mb-6">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                          {language === 'ar' ? 'جميع الإصدارات' : 'All Versions'}
                        </h3>
                        <Badge variant="outline" className="bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300">
                          {Array.isArray(evidenceVersions) ? evidenceVersions.length + 1 : 1} {language === 'ar' ? 'إصدار' : 'Versions'}
                        </Badge>
                      </div>
                      
                      <div className="space-y-4">
                        {/* All Versions - Current at top, then chronological order */}
                        {(() => {
                          // Combine current version with all previous versions
                          const allVersions = [
                            // Current version
                            {
                              id: selectedEvidence.id,
                              version: selectedEvidence.version,
                              fileName: selectedEvidence.fileName,
                              fileSize: selectedEvidence.fileSize,
                              fileType: selectedEvidence.fileType,
                              filePath: selectedEvidence.filePath,
                              createdAt: selectedEvidence.createdAt,
                              isCurrent: true
                            },
                            // Previous versions
                            ...(Array.isArray(evidenceVersions) ? evidenceVersions : []).map(v => ({
                              ...v,
                              isCurrent: false
                            }))
                          ];

                          // Sort all versions by version number (descending) - current version will naturally be at top
                          const sortedVersions = allVersions.sort((a, b) => {
                            const aVersion = parseFloat(a.version);
                            const bVersion = parseFloat(b.version);
                            return bVersion - aVersion;
                          });

                          return sortedVersions.map((version, index) => (
                            <Card key={`version-${version.id}-${version.isCurrent}`} className="p-6 border border-gray-200 dark:border-gray-700 hover:shadow-md transition-shadow duration-200">
                              <div className="flex items-center justify-between">
                                <div className="flex items-center gap-4">
                                  <div className={`w-12 h-12 bg-gradient-to-br rounded-xl flex items-center justify-center shadow-sm ${
                                    version.isCurrent 
                                      ? 'from-teal-50 to-teal-100' 
                                      : 'from-gray-50 to-gray-100'
                                  }`}>
                                    {getFileIcon(version.fileType)}
                                  </div>
                                  <div className="flex-1 min-w-0">
                                    <h4 className="font-semibold text-gray-900 dark:text-white mb-1">{version.fileName}</h4>
                                    <div className="flex items-center gap-4 text-sm text-gray-500">
                                      <span className="flex items-center gap-1">
                                        <span className={`w-2 h-2 rounded-full ${
                                          version.isCurrent ? 'bg-teal-500' : 'bg-gray-400'
                                        }`}></span>
                                        v{version.version}
                                      </span>
                                      <span>{formatFileSize(version.fileSize)}</span>
                                      <span>{formatDate(version.createdAt)}</span>
                                    </div>
                                  </div>
                                </div>
                                <div className="flex items-center gap-3">
                                  <Badge 
                                    variant={version.isCurrent ? "secondary" : "outline"} 
                                    className={version.isCurrent 
                                      ? "bg-teal-100 text-teal-700 border-teal-200" 
                                      : "bg-gray-100 text-gray-600 border-gray-300"
                                    }
                                  >
                                    {version.isCurrent 
                                      ? (language === 'ar' ? 'الحالي' : 'Current')
                                      : (language === 'ar' ? 'سابق' : 'Previous')
                                    }
                                  </Badge>
                                  <Button 
                                    size="sm" 
                                    variant="outline" 
                                    onClick={() => {
                                      if (version.isCurrent) {
                                        handleDownload(selectedEvidence);
                                      } else {
                                        // Download specific version
                                        const link = document.createElement('a');
                                        link.href = `/uploads/${version.filePath.split('/').pop()}`;
                                        link.download = version.fileName;
                                        document.body.appendChild(link);
                                        link.click();
                                        document.body.removeChild(link);
                                      }
                                    }}
                                    className="hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                                  >
                                    <Download className="h-3 w-3 mr-1" />
                                    {language === 'ar' ? 'تحميل' : 'Download'}
                                  </Button>
                                </div>
                              </div>
                            </Card>
                          ));
                        })()}
                        
                        {(!Array.isArray(evidenceVersions) || evidenceVersions.length === 0) && (
                          <div className="text-center py-6 text-gray-500 mt-4">
                            <div className="w-12 h-12 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-3">
                              <FileText className="h-6 w-6 text-gray-400" />
                            </div>
                            <p className="text-sm text-gray-400">
                              {language === 'ar' ? 'إصدار واحد فقط متاح' : 'Only one version available'}
                            </p>
                          </div>
                        )}
                      </div>
                  </div>
                </TabsContent>

                {/* Comments Tab */}
                <TabsContent value="comments" className="flex-1 overflow-hidden">
                  <div className="h-full flex flex-col px-6 py-4">
                    <div className="flex-shrink-0 mb-4">
                      <div className="flex items-center justify-between">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white">
                          {language === 'ar' ? 'التعليقات' : 'Comments'}
                        </h3>
                        <Badge variant="outline" className="bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300">
                          {Array.isArray(evidenceComments) ? evidenceComments.length : 0} {language === 'ar' ? 'تعليق' : 'Comments'}
                        </Badge>
                      </div>
                    </div>
                      
                    {/* Add Comment Form */}
                    <div className="flex-shrink-0 mb-4">
                      <Card className="p-4 border border-gray-200 dark:border-gray-700 shadow-sm">
                        <div className="space-y-4">
                          <div className="flex items-center gap-3">
                            <MessageCircle className="h-5 w-5 text-teal-600" />
                            <h4 className="font-semibold text-gray-900 dark:text-white">
                              {language === 'ar' ? 'إضافة تعليق جديد' : 'Add New Comment'}
                            </h4>
                          </div>
                          <Textarea
                            placeholder={language === 'ar' ? 'اكتب تعليقك هنا...' : 'Write your comment here...'}
                            value={newComment}
                            onChange={(e) => setNewComment(e.target.value)}
                            rows={3}
                            className="resize-none border-gray-200 dark:border-gray-700 focus:border-teal-400 focus:ring-teal-400"
                          />
                          <div className="flex justify-end gap-3">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => setNewComment('')}
                              disabled={!newComment.trim()}
                              className="hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                            >
                              {language === 'ar' ? 'إلغاء' : 'Cancel'}
                            </Button>
                            <Button
                              size="sm"
                              onClick={addCommentToEvidence}
                              disabled={!newComment.trim() || isAddingComment}
                              className="bg-teal-600 hover:bg-teal-700 text-white shadow-md hover:shadow-lg transition-all duration-200"
                            >
                              {isAddingComment ? (
                                <>
                                  <div className="animate-spin h-3 w-3 mr-2 border border-white border-t-transparent rounded-full" />
                                  {language === 'ar' ? 'جاري الإضافة...' : 'Adding...'}
                                </>
                              ) : (
                                <>
                                  <MessageCircle className="h-3 w-3 mr-2" />
                                  {language === 'ar' ? 'إضافة تعليق' : 'Add Comment'}
                                </>
                              )}
                            </Button>
                          </div>
                        </div>
                      </Card>
                    </div>
                      
                    {/* Comments List - Scrollable */}
                    <div className="flex-1 overflow-y-auto space-y-2">
                        {Array.isArray(evidenceComments) && evidenceComments.length > 0 ? (
                          evidenceComments.map((comment: any) => (
                            <div key={comment.id} className={`p-3 border rounded-lg transition-colors duration-200 ${
                              comment.isSystemComment 
                                ? 'border-amber-200 dark:border-amber-800 bg-amber-50 dark:bg-amber-950' 
                                : 'border-gray-200 dark:border-gray-700 bg-white dark:bg-gray-800'
                            }`}>
                              <div className="flex items-start gap-3">
                                {comment.isSystemComment ? (
                                  <div className="w-6 h-6 bg-gradient-to-br from-amber-100 to-amber-200 dark:from-amber-800 dark:to-amber-900 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5">
                                    <Shield className="h-3 w-3 text-amber-600 dark:text-amber-400" />
                                  </div>
                                ) : (
                                  <UserAvatar 
                                    user={{
                                      firstName: comment.user.name?.split(' ')[0] || '',
                                      lastName: comment.user.name?.split(' ').slice(1).join(' ') || '',
                                      email: comment.user.email,
                                      profileImageUrl: comment.user.profilePicture
                                    }}
                                    size="sm"
                                  />
                                )}
                                <div className="flex-1 min-w-0">
                                  <div className="flex items-center gap-2 mb-1">
                                    <span className="font-medium text-xs text-gray-900 dark:text-white">
                                      {comment.isSystemComment 
                                        ? (language === 'ar' ? 'سجل النظام' : 'System Log')
                                        : comment.user.name
                                      }
                                    </span>
                                    {comment.isSystemComment && (
                                      <Badge variant="outline" className="bg-amber-100 dark:bg-amber-900 text-amber-700 dark:text-amber-300 border-amber-300 dark:border-amber-700 text-xs h-4 px-1.5">
                                        {language === 'ar' ? 'ملاحظة إصدار' : 'Version Note'}
                                      </Badge>
                                    )}
                                    <span className="text-xs text-gray-500 dark:text-gray-400 ml-auto">
                                      {new Date(comment.createdAt).toLocaleDateString()} • {new Date(comment.createdAt).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}
                                    </span>
                                  </div>
                                  <p className={`text-xs leading-relaxed break-words ${
                                    comment.isSystemComment 
                                      ? 'text-amber-800 dark:text-amber-200' 
                                      : 'text-gray-700 dark:text-gray-300'
                                  }`}>
                                    {comment.comment}
                                  </p>
                                </div>
                              </div>
                            </div>
                          ))
                        ) : (
                          <div className="text-center py-12 text-gray-500">
                            <div className="w-16 h-16 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center mx-auto mb-4">
                              <MessageCircle className="h-8 w-8 text-gray-400" />
                            </div>
                            <p className="text-lg font-medium mb-2">{language === 'ar' ? 'لا توجد تعليقات حتى الآن' : 'No comments yet'}</p>
                            <p className="text-sm text-gray-400">
                              {language === 'ar' ? 'أضف أول تعليق أعلاه' : 'Add the first comment above'}
                            </p>
                          </div>
                        )}
                    </div>
                  </div>
                </TabsContent>

                {/* Upload New Version Tab */}
                <TabsContent value="upload" className="flex-1 overflow-hidden">
                  <div className="h-full overflow-y-auto px-6 py-6">
                      <div className="mb-4">
                        <h3 className="text-lg font-semibold text-gray-900 dark:text-white mb-1">
                          {language === 'ar' ? 'رفع إصدار جديد' : 'Upload New Version'}
                        </h3>
                        <p className="text-xs text-gray-600 dark:text-gray-400">
                          {language === 'ar' ? 'رفع ملف جديد كإصدار محدث من الدليل الحالي' : 'Upload a new file as an updated version of the current evidence'}
                        </p>
                      </div>
                      
                      <div className="space-y-4">
                        <div className={`border-2 border-dashed rounded-xl p-6 text-center transition-all duration-200 ${
                          newVersionFile ? 'border-teal-400 bg-teal-50 dark:bg-teal-950' : 'border-gray-300 dark:border-gray-600 hover:border-gray-400 dark:hover:border-gray-500'
                        }`}>
                          <Upload className={`h-12 w-12 mx-auto mb-3 transition-colors ${
                            newVersionFile ? 'text-teal-500' : 'text-gray-400'
                          }`} />
                          {newVersionFile ? (
                            <div className="space-y-2">
                              <p className="text-lg font-semibold text-teal-700 dark:text-teal-400">
                                {newVersionFile.name}
                              </p>
                              <p className="text-sm text-gray-600 dark:text-gray-400">
                                {(newVersionFile.size / (1024 * 1024)).toFixed(2)} MB • {newVersionFile.type || 'Unknown type'}
                              </p>
                            </div>
                          ) : (
                            <div className="space-y-1">
                              <p className="text-base font-medium text-gray-700 dark:text-gray-300">
                                {language === 'ar' ? 'اختر ملف أو اسحبه هنا' : 'Choose file or drag and drop'}
                              </p>
                              <p className="text-xs text-gray-500">
                                {language === 'ar' ? 'سيتم رفعه كإصدار جديد من' : 'Will be uploaded as a new version of'} {selectedEvidence.title}
                              </p>
                            </div>
                          )}
                          <input
                            type="file"
                            id="new-version-file"
                            className="hidden"
                            onChange={handleNewVersionFileChange}
                            accept="*/*"
                          />
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => document.getElementById('new-version-file')?.click()}
                            className="mt-3 hover:bg-gray-50 dark:hover:bg-gray-800 transition-colors"
                          >
                            {newVersionFile ? 
                              (language === 'ar' ? 'اختيار ملف آخر' : 'Choose Different File') :
                              (language === 'ar' ? 'اختيار ملف' : 'Choose File')
                            }
                          </Button>
                        </div>

                        <div className="space-y-3">
                          <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-950 dark:to-indigo-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
                            <div className="flex items-center gap-2 mb-2">
                              <div className="w-6 h-6 bg-blue-100 dark:bg-blue-900 rounded-lg flex items-center justify-center">
                                <Shield className="h-3 w-3 text-blue-600 dark:text-blue-400" />
                              </div>
                              <span className="font-medium text-blue-900 dark:text-blue-100 text-sm">
                                {language === 'ar' ? 'الإصدار التلقائي' : 'Automatic Versioning'}
                              </span>
                            </div>
                            <p className="text-xs text-blue-700 dark:text-blue-300 leading-relaxed">
                              {language === 'ar' 
                                ? 'سيتم إنشاء رقم الإصدار تلقائياً بناءً على الإصدار الحالي (مثال: v1.0 → v2.0 → v3.0)' 
                                : 'Version number will be generated automatically based on the current version (e.g., v1.0 → v2.0 → v3.0)'}
                            </p>
                          </div>
                          
                          <div className="space-y-2">
                            <label className="text-xs font-medium text-gray-700 dark:text-gray-300 block">
                              {language === 'ar' ? 'ملاحظات الإصدار' : 'Version Notes'} 
                              <span className="text-gray-500 font-normal ml-1">({language === 'ar' ? 'اختياري' : 'Optional'})</span>
                            </label>
                            <Textarea 
                              placeholder={language === 'ar' ? 'اكتب ملاحظات حول هذا الإصدار...' : 'Write notes about this version...'}
                              className="resize-none border-gray-200 dark:border-gray-700 focus:border-teal-400 focus:ring-teal-400 text-sm"
                              rows={3}
                              value={versionNotes}
                              onChange={(e) => setVersionNotes(e.target.value)}
                            />
                          </div>

                          <Button
                            className="w-full h-10 bg-teal-600 hover:bg-teal-700 text-white shadow-md hover:shadow-lg transition-all duration-200 text-sm"
                            disabled={!newVersionFile}
                            onClick={handleNewVersionUpload}
                          >
                            <Upload className="h-4 w-4 mr-2" />
                            {language === 'ar' ? 'رفع الإصدار الجديد' : 'Upload New Version'}
                          </Button>
                        </div>
                      </div>
                  </div>
                </TabsContent>
              </Tabs>
            )}
          </DialogContent>
        </Dialog>

        {/* Comment Dialog */}
        <Dialog open={isCommentDialogOpen} onOpenChange={setIsCommentDialogOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>
                {language === 'ar' ? 'إضافة تعليق' : 'Add Comment'}
              </DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <Textarea
                placeholder={language === 'ar' ? 'اكتب تعليقك هنا...' : 'Write your comment here...'}
                value={comment}
                onChange={(e) => setComment(e.target.value)}
                rows={4}
              />
              <div className="flex gap-2">
                <Button
                  variant="outline"
                  onClick={() => {
                    setIsCommentDialogOpen(false);
                    setComment('');
                  }}
                  className="flex-1"
                >
                  Cancel
                </Button>
                <Button
                  onClick={() => {
                    // Handle comment submission here
                    setIsCommentDialogOpen(false);
                    setComment('');
                  }}
                  className="flex-1"
                >
                  Add Comment
                </Button>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      </div>
    </AppLayout>
  );
}
